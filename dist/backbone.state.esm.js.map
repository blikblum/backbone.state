{"version":3,"file":"backbone.state.esm.js","sources":["../src/resource.js","../src/storage.js"],"sourcesContent":["import { Model, Collection } from 'backbone'\r\nimport pathToRegexp from 'path-to-regexp'\r\n\r\nfunction getResourcePath (resourceDef, params = {}, resourceId) {\r\n  const toPath = pathToRegexp.compile(resourceDef.path)\r\n  let query = ''\r\n  let result = toPath(params)\r\n  if (resourceDef.params) {\r\n    resourceDef.params.forEach(paramDef => {\r\n      const paramValue = params[paramDef.name]\r\n      const isQuery = paramDef.location === 'query'\r\n      const isRequired = (typeof paramDef.required === 'undefined' && !isQuery) || paramDef.required === true\r\n      if (isRequired && paramValue == null) {\r\n        throw new Error(`Param ${paramDef.name} is not defined for resource ${resourceDef.name}`)\r\n      }\r\n      if (isQuery && paramValue != null) {\r\n        query += `${query ? '&' : ''}${encodeURIComponent(paramDef.name)}=${encodeURIComponent(paramValue)}`\r\n      }\r\n    })\r\n  }\r\n  if (resourceId) {\r\n    result = result.replace(/[^/]$/, '$&/') + encodeURIComponent(resourceId)\r\n  }\r\n  if (query) {\r\n    result += `?${query}`\r\n  }\r\n  return result\r\n}\r\n\r\nfunction findResourceDef (client, resource) {\r\n  const result = client.resourceDefs.find(def => def.name === resource)\r\n  if (!result) {\r\n    throw new Error(`Unable to find resource definition for ${resource}`)\r\n  }\r\n  return result\r\n}\r\n\r\nexport function createResourceSync (originalSync) {\r\n  return function resourceSync (method, model, options) {\r\n    if (model.resource) {\r\n      let resourceId\r\n      const client = model.resourceClient || (model.collection && model.collection.resourceClient)\r\n      if (!client) {\r\n        throw new Error(`resourceClient not defined for ${model.cid}`)\r\n      }\r\n      const resourceDef = findResourceDef(client, model.resource)\r\n      if (model instanceof Model) {\r\n        const idAttribute = 'idAttribute' in resourceDef ? resourceDef.idAttribute : model.idAttribute\r\n        if (idAttribute) {\r\n          resourceId = model.get(idAttribute)\r\n        } else if (method === 'create') {\r\n          method = 'update'\r\n        }\r\n      }\r\n      options = options ? Object.assign({}, options) : {}\r\n      options.url = client.baseUrl + getResourcePath(resourceDef, model.params, resourceId)\r\n    }\r\n    return originalSync(method, model, options)\r\n  }\r\n}\r\n\r\nexport const paramsMixin = {\r\n  clearParams () {\r\n    this.params && (this.params = {})\r\n  },\r\n\r\n  setParam (name, value) {\r\n    this.params || (this.params = {})\r\n    this.params[name] = value\r\n  }\r\n}\r\n\r\nexport const ResourceModel = Model.extend(paramsMixin)\r\n\r\nexport const ResourceCollection = Collection.extend(paramsMixin)\r\n","import Backbone from 'backbone'\r\n\r\n/**\r\n * A container for all the models of a particular type. Manages requests to your\r\n * server.\r\n * Original author: James Kyle <me@thejameskyle.com>\r\n * @example\r\n * var BookStorage = Storage.extend({\r\n *   model: Book,\r\n *   collection: Books\r\n * });\r\n * var bookStorage = new BookStorage();\r\n *\r\n * bookStorage.find(1).then(function(model) {\r\n *   model.doSomething();\r\n * });\r\n *\r\n * bookStorage.findAll().then(function(collection) {\r\n *   collection.doSomething();\r\n * });\r\n *\r\n * var book = new Book({ title: 'Lord of the Flies' });\r\n *\r\n * bookStorage.save(book).then(function() {\r\n *   book.isNew(); // false\r\n * });\r\n *\r\n * @public\r\n * @class Storage\r\n */\r\nclass Storage {\r\n\r\n  /**\r\n   * The model class to store.\r\n   * @type {Backbone.Model}\r\n   */\r\n  static model = Backbone.Model\r\n\r\n  /**\r\n   * The collection class to store.\r\n   * @type {Backbone.Collection}\r\n   */\r\n  static collection = Backbone.Collection\r\n\r\n  /**\r\n   * @public\r\n   * @constructs Storage\r\n   */\r\n  constructor () {\r\n    this.records = new this.constructor.collection()\r\n    this.listenToOnce(this.records, 'sync', () => {\r\n      this._hasSynced = true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Find a specific model from the store or fetch it from the server and insert\r\n   * it into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method find\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to find.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the model.\r\n   */\r\n  find (model, forceFetch = false) {\r\n    let record = this.records.get(model)\r\n\r\n    if (record && !forceFetch) {\r\n      return Promise.resolve(record)\r\n    } else {\r\n      model = this._ensureModel(model)\r\n      return Promise.resolve(model.fetch()).then(() => {\r\n        return this.insert(model)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all the models in the store or fetch them from the server if they\r\n   * haven't been fetched before.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method findAll\r\n   * @memberOf Storage\r\n   * @param {Object} options - Options to pass to collection fetch. Also allows\r\n   * setting parameters on collection.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the entire collection.\r\n   */\r\n  findAll (options = {}, forceFetch = false) {\r\n    if (this._hasSynced && !forceFetch) {\r\n      return Promise.resolve(this.records)\r\n    } else {\r\n      return Promise.resolve(this.records.fetch(options)).then(() => {\r\n        return this.records\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save a model to the server.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method save\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to save\r\n   * @returns {Promise} - A promise that will resolve to the saved model.\r\n   */\r\n  save (model, options) {\r\n    let attributes\r\n    let record = this.records.get(model)\r\n    if (record) {\r\n      if (typeof model === 'object' && record !== model) {\r\n        attributes = model instanceof this.constructor.model ? model.attributes : model\r\n      }\r\n      model = record\r\n    } else {\r\n      model = this._ensureModel(model)\r\n    }\r\n    return Promise.resolve(model.save(attributes, options)).then(() => {\r\n      if (!record) {\r\n        this.insert(model)\r\n      }\r\n      return model\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Insert a model into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method insert\r\n   * @memberOf Storage\r\n   * @params {Object|Backbone.Model} - The model to add.\r\n   * @returns {Promise} - A promise that will resolve to the added model.\r\n   */\r\n  insert (model) {\r\n    model = this.records.add(model, { merge: true })\r\n    return Promise.resolve(model)\r\n  }\r\n\r\n  /**\r\n   * Ensure that we have a real model from an id, object, or model.\r\n   *\r\n   * @private\r\n   * @instance\r\n   * @method _ensureModel\r\n   * @memberOf Storage\r\n   * @params {Number|String|Object|Backbone.Model} - An id, object, or model.\r\n   * @returns {Backbone.Model} - The model.\r\n   */\r\n  _ensureModel (model) {\r\n    const ModelClass = this.constructor.model\r\n    if (model instanceof ModelClass) {\r\n      return model\r\n    } else if (typeof model === 'object') {\r\n      return new ModelClass(model)\r\n    } else {\r\n      return new ModelClass({ id: model })\r\n    }\r\n  }\r\n}\r\n\r\nObject.assign(Storage.prototype, Backbone.Events)\r\n\r\nexport default Storage\r\n"],"names":["getResourcePath","resourceDef","params","resourceId","toPath","pathToRegexp","compile","path","query","result","forEach","paramValue","paramDef","name","isQuery","location","isRequired","required","Error","encodeURIComponent","replace","findResourceDef","client","resource","resourceDefs","find","def","createResourceSync","originalSync","resourceSync","method","model","options","resourceClient","collection","cid","Model","idAttribute","get","Object","assign","url","baseUrl","paramsMixin","value","ResourceModel","extend","ResourceCollection","Collection","Storage","records","constructor","listenToOnce","_hasSynced","forceFetch","record","Promise","resolve","_ensureModel","fetch","then","insert","findAll","save","attributes","add","merge","ModelClass","id","Backbone","prototype","Events"],"mappings":"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"}