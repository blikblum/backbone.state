{"version":3,"file":"index.js","sources":["../src/storage.js"],"sourcesContent":["import Backbone from 'backbone'\r\nimport Metal from 'backbone-metal'\r\n\r\n/**\r\n * A container for all the models of a particular type. Manages requests to your\r\n * server.\r\n *\r\n * @example\r\n * var BookStorage = Storage.extend({\r\n *   model: Book,\r\n *   collection: Books\r\n * });\r\n * var bookStorage = new BookStorage();\r\n *\r\n * bookStorage.find(1).then(function(model) {\r\n *   model.doSomething();\r\n * });\r\n *\r\n * bookStorage.findAll().then(function(collection) {\r\n *   collection.doSomething();\r\n * });\r\n *\r\n * var book = new Book({ title: 'Lord of the Flies' });\r\n *\r\n * bookStorage.save(book).then(function() {\r\n *   book.isNew(); // false\r\n * });\r\n *\r\n * @public\r\n * @class Storage\r\n */\r\nvar Storage = Backbone.Storage = Metal.Class.extend({\r\n\r\n  /**\r\n   * The model class to store.\r\n   * @type {Backbone.Model}\r\n   */\r\n  model: Backbone.Model,\r\n\r\n  /**\r\n   * The collection class to store.\r\n   * @type {Backbone.Collection}\r\n   */\r\n  collection: Backbone.Collection,\r\n\r\n  /**\r\n   * @public\r\n   * @constructs Storage\r\n   */\r\n  constructor () {\r\n    this.records = new this.collection()\r\n    this.listenToOnce(this.records, 'sync', () => {\r\n      this._hasSynced = true\r\n    })\r\n    this._super.apply(this, arguments)\r\n  },\r\n\r\n  /**\r\n   * Find a specific model from the store or fetch it from the server and insert\r\n   * it into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method find\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to find.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the model.\r\n   */\r\n  find (model, forceFetch = false) {\r\n    let record = this.records.get(model)\r\n\r\n    if (record && !forceFetch) {\r\n      return Promise.resolve(record)\r\n    } else {\r\n      model = this._ensureModel(model)\r\n      return Promise.resolve(model.fetch()).then(() => {\r\n        return this.insert(model)\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Find all the models in the store or fetch them from the server if they\r\n   * haven't been fetched before.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method findAll\r\n   * @memberOf Storage\r\n   * @param {Object} options - Options to pass to collection fetch. Also allows\r\n   * setting parameters on collection.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the entire collection.\r\n   */\r\n  findAll (options = {}, forceFetch = false) {\r\n    if (this._hasSynced && !forceFetch) {\r\n      return Promise.resolve(this.records)\r\n    } else {\r\n      return Promise.resolve(this.records.fetch(options)).then(() => {\r\n        return this.records\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save a model to the server.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method save\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to save\r\n   * @returns {Promise} - A promise that will resolve to the saved model.\r\n   */\r\n  save (model) {\r\n    let record = this.records.get(model)\r\n    model = record || this._ensureModel(model)\r\n    return Promise.resolve(model.save()).then(() => {\r\n      if (!record) {\r\n        this.insert(model)\r\n      }\r\n      return model\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Insert a model into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method insert\r\n   * @memberOf Storage\r\n   * @params {Object|Backbone.Model} - The model to add.\r\n   * @returns {Promise} - A promise that will resolve to the added model.\r\n   */\r\n  insert (model) {\r\n    model = this.records.add(model, { merge: true })\r\n    return Promise.resolve(model)\r\n  },\r\n\r\n  /**\r\n   * Ensure that we have a real model from an id, object, or model.\r\n   *\r\n   * @private\r\n   * @instance\r\n   * @method _ensureModel\r\n   * @memberOf Storage\r\n   * @params {Number|String|Object|Backbone.Model} - An id, object, or model.\r\n   * @returns {Backbone.Model} - The model.\r\n   */\r\n  _ensureModel (model) {\r\n    if (model instanceof this.model) {\r\n      return model\r\n    } else if (typeof model === 'object') {\r\n      return new this.model(model)\r\n    } else {\r\n      return new this.model({ id: model })\r\n    }\r\n  }\r\n})\r\n\r\nexport default Storage\r\n"],"names":["Storage","Backbone","Metal","Class","extend","model","Model","collection","Collection","constructor","records","listenToOnce","_hasSynced","_super","apply","arguments","find","forceFetch","record","get","Promise","resolve","_ensureModel","fetch","then","insert","findAll","options","save","add","merge","id"],"mappings":"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"}