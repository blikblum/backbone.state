{"version":3,"file":"index.esm.js","sources":["../src/storage.js"],"sourcesContent":["import Backbone from 'backbone'\r\nimport Metal from 'backbone-metal'\r\n\r\n/**\r\n * A container for all the models of a particular type. Manages requests to your\r\n * server.\r\n *\r\n * @example\r\n * var BookStorage = Storage.extend({\r\n *   model: Book,\r\n *   collection: Books\r\n * });\r\n * var bookStorage = new BookStorage();\r\n *\r\n * bookStorage.find(1).then(function(model) {\r\n *   model.doSomething();\r\n * });\r\n *\r\n * bookStorage.findAll().then(function(collection) {\r\n *   collection.doSomething();\r\n * });\r\n *\r\n * var book = new Book({ title: 'Lord of the Flies' });\r\n *\r\n * bookStorage.save(book).then(function() {\r\n *   book.isNew(); // false\r\n * });\r\n *\r\n * @public\r\n * @class Storage\r\n */\r\nvar Storage = Backbone.Storage = Metal.Class.extend({\r\n\r\n  /**\r\n   * The model class to store.\r\n   * @type {Backbone.Model}\r\n   */\r\n  model: Backbone.Model,\r\n\r\n  /**\r\n   * The collection class to store.\r\n   * @type {Backbone.Collection}\r\n   */\r\n  collection: Backbone.Collection,\r\n\r\n  /**\r\n   * @public\r\n   * @constructs Storage\r\n   */\r\n  constructor () {\r\n    this.records = new this.collection()\r\n    this.listenToOnce(this.records, 'sync', () => {\r\n      this._hasSynced = true\r\n    })\r\n    this._super.apply(this, arguments)\r\n  },\r\n\r\n  /**\r\n   * Find a specific model from the store or fetch it from the server and insert\r\n   * it into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method find\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to find.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the model.\r\n   */\r\n  find (model, forceFetch = false) {\r\n    let record = this.records.get(model)\r\n\r\n    if (record && !forceFetch) {\r\n      return Promise.resolve(record)\r\n    } else {\r\n      model = this._ensureModel(model)\r\n      return Promise.resolve(model.fetch()).then(() => {\r\n        return this.insert(model)\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Find all the models in the store or fetch them from the server if they\r\n   * haven't been fetched before.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method findAll\r\n   * @memberOf Storage\r\n   * @param {Object} options - Options to pass to collection fetch. Also allows\r\n   * setting parameters on collection.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the entire collection.\r\n   */\r\n  findAll (options = {}, forceFetch = false) {\r\n    if (this._hasSynced && !forceFetch) {\r\n      return Promise.resolve(this.records)\r\n    } else {\r\n      return Promise.resolve(this.records.fetch(options)).then(() => {\r\n        return this.records\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save a model to the server.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method save\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to save\r\n   * @returns {Promise} - A promise that will resolve to the saved model.\r\n   */\r\n  save (model) {\r\n    let record = this.records.get(model)\r\n    model = record || this._ensureModel(model)\r\n    return Promise.resolve(model.save()).then(() => {\r\n      if (!record) {\r\n        this.insert(model)\r\n      }\r\n      return model\r\n    })\r\n  },\r\n\r\n  /**\r\n   * Insert a model into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method insert\r\n   * @memberOf Storage\r\n   * @params {Object|Backbone.Model} - The model to add.\r\n   * @returns {Promise} - A promise that will resolve to the added model.\r\n   */\r\n  insert (model) {\r\n    model = this.records.add(model, { merge: true })\r\n    return Promise.resolve(model)\r\n  },\r\n\r\n  /**\r\n   * Ensure that we have a real model from an id, object, or model.\r\n   *\r\n   * @private\r\n   * @instance\r\n   * @method _ensureModel\r\n   * @memberOf Storage\r\n   * @params {Number|String|Object|Backbone.Model} - An id, object, or model.\r\n   * @returns {Backbone.Model} - The model.\r\n   */\r\n  _ensureModel (model) {\r\n    if (model instanceof this.model) {\r\n      return model\r\n    } else if (typeof model === 'object') {\r\n      return new this.model(model)\r\n    } else {\r\n      return new this.model({ id: model })\r\n    }\r\n  }\r\n})\r\n\r\nexport default Storage\r\n"],"names":["Storage","Backbone","Metal","Class","extend","Model","Collection","records","collection","listenToOnce","_hasSynced","_super","apply","arguments","model","forceFetch","record","get","Promise","resolve","_ensureModel","fetch","then","insert","options","save","add","merge","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAIA,UAAUC,SAASD,OAAT,GAAmBE,MAAMC,KAAN,CAAYC,MAAZ,CAAmB;;;;;;SAM3CH,SAASI,KANkC;;;;;;cAYtCJ,SAASK,UAZ6B;;;;;;aAAA,yBAkBnC;;;SACRC,OAAL,GAAe,IAAI,KAAKC,UAAT,EAAf;SACKC,YAAL,CAAkB,KAAKF,OAAvB,EAAgC,MAAhC,EAAwC,YAAM;YACvCG,UAAL,GAAkB,IAAlB;KADF;SAGKC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB;GAvBgD;;;;;;;;;;;;;;;MAAA,gBAsC5CC,KAtC4C,EAsCjB;;;QAApBC,UAAoB,uEAAP,KAAO;;QAC3BC,SAAS,KAAKT,OAAL,CAAaU,GAAb,CAAiBH,KAAjB,CAAb;;QAEIE,UAAU,CAACD,UAAf,EAA2B;aAClBG,QAAQC,OAAR,CAAgBH,MAAhB,CAAP;KADF,MAEO;cACG,KAAKI,YAAL,CAAkBN,KAAlB,CAAR;aACOI,QAAQC,OAAR,CAAgBL,MAAMO,KAAN,EAAhB,EAA+BC,IAA/B,CAAoC,YAAM;eACxC,OAAKC,MAAL,CAAYT,KAAZ,CAAP;OADK,CAAP;;GA7C8C;;;;;;;;;;;;;;;;SAAA,qBAgEP;;;QAAlCU,OAAkC,uEAAxB,EAAwB;QAApBT,UAAoB,uEAAP,KAAO;;QACrC,KAAKL,UAAL,IAAmB,CAACK,UAAxB,EAAoC;aAC3BG,QAAQC,OAAR,CAAgB,KAAKZ,OAArB,CAAP;KADF,MAEO;aACEW,QAAQC,OAAR,CAAgB,KAAKZ,OAAL,CAAac,KAAb,CAAmBG,OAAnB,CAAhB,EAA6CF,IAA7C,CAAkD,YAAM;eACtD,OAAKf,OAAZ;OADK,CAAP;;GApE8C;;;;;;;;;;;;;MAAA,gBAoF5CO,KApF4C,EAoFrC;;;QACPE,SAAS,KAAKT,OAAL,CAAaU,GAAb,CAAiBH,KAAjB,CAAb;YACQE,UAAU,KAAKI,YAAL,CAAkBN,KAAlB,CAAlB;WACOI,QAAQC,OAAR,CAAgBL,MAAMW,IAAN,EAAhB,EAA8BH,IAA9B,CAAmC,YAAM;UAC1C,CAACN,MAAL,EAAa;eACNO,MAAL,CAAYT,KAAZ;;aAEKA,KAAP;KAJK,CAAP;GAvFgD;;;;;;;;;;;;;QAAA,kBAyG1CA,KAzG0C,EAyGnC;YACL,KAAKP,OAAL,CAAamB,GAAb,CAAiBZ,KAAjB,EAAwB,EAAEa,OAAO,IAAT,EAAxB,CAAR;WACOT,QAAQC,OAAR,CAAgBL,KAAhB,CAAP;GA3GgD;;;;;;;;;;;;;cAAA,wBAwHpCA,KAxHoC,EAwH7B;QACfA,iBAAiB,KAAKA,KAA1B,EAAiC;aACxBA,KAAP;KADF,MAEO,IAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+B;aAC7B,IAAI,KAAKA,KAAT,CAAeA,KAAf,CAAP;KADK,MAEA;aACE,IAAI,KAAKA,KAAT,CAAe,EAAEc,IAAId,KAAN,EAAf,CAAP;;;CA9H2B,CAAjC;;;;"}