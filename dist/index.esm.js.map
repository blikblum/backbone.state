{"version":3,"file":"index.esm.js","sources":["../src/storage.js"],"sourcesContent":["import Backbone from 'backbone'\r\n\r\n/**\r\n * A container for all the models of a particular type. Manages requests to your\r\n * server.\r\n *\r\n * @example\r\n * var BookStorage = Storage.extend({\r\n *   model: Book,\r\n *   collection: Books\r\n * });\r\n * var bookStorage = new BookStorage();\r\n *\r\n * bookStorage.find(1).then(function(model) {\r\n *   model.doSomething();\r\n * });\r\n *\r\n * bookStorage.findAll().then(function(collection) {\r\n *   collection.doSomething();\r\n * });\r\n *\r\n * var book = new Book({ title: 'Lord of the Flies' });\r\n *\r\n * bookStorage.save(book).then(function() {\r\n *   book.isNew(); // false\r\n * });\r\n *\r\n * @public\r\n * @class Storage\r\n */\r\nclass Storage {\r\n\r\n  /**\r\n   * The model class to store.\r\n   * @type {Backbone.Model}\r\n   */\r\n  static model = Backbone.Model\r\n\r\n  /**\r\n   * The collection class to store.\r\n   * @type {Backbone.Collection}\r\n   */\r\n  static collection = Backbone.Collection\r\n\r\n  /**\r\n   * @public\r\n   * @constructs Storage\r\n   */\r\n  constructor () {\r\n    this.records = new this.constructor.collection()\r\n    this.listenToOnce(this.records, 'sync', () => {\r\n      this._hasSynced = true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Find a specific model from the store or fetch it from the server and insert\r\n   * it into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method find\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to find.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the model.\r\n   */\r\n  find (model, forceFetch = false) {\r\n    let record = this.records.get(model)\r\n\r\n    if (record && !forceFetch) {\r\n      return Promise.resolve(record)\r\n    } else {\r\n      model = this._ensureModel(model)\r\n      return Promise.resolve(model.fetch()).then(() => {\r\n        return this.insert(model)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all the models in the store or fetch them from the server if they\r\n   * haven't been fetched before.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method findAll\r\n   * @memberOf Storage\r\n   * @param {Object} options - Options to pass to collection fetch. Also allows\r\n   * setting parameters on collection.\r\n   * @param {Boolean} forceFetch - Force fetch model from server.\r\n   * @returns {Promise} - A promise that will resolve to the entire collection.\r\n   */\r\n  findAll (options = {}, forceFetch = false) {\r\n    if (this._hasSynced && !forceFetch) {\r\n      return Promise.resolve(this.records)\r\n    } else {\r\n      return Promise.resolve(this.records.fetch(options)).then(() => {\r\n        return this.records\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save a model to the server.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method save\r\n   * @memberOf Storage\r\n   * @param {Number|String|Object|Backbone.Model} model - The model to save\r\n   * @returns {Promise} - A promise that will resolve to the saved model.\r\n   */\r\n  save (model) {\r\n    let record = this.records.get(model)\r\n    model = record || this._ensureModel(model)\r\n    return Promise.resolve(model.save()).then(() => {\r\n      if (!record) {\r\n        this.insert(model)\r\n      }\r\n      return model\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Insert a model into the store.\r\n   *\r\n   * @public\r\n   * @instance\r\n   * @method insert\r\n   * @memberOf Storage\r\n   * @params {Object|Backbone.Model} - The model to add.\r\n   * @returns {Promise} - A promise that will resolve to the added model.\r\n   */\r\n  insert (model) {\r\n    model = this.records.add(model, { merge: true })\r\n    return Promise.resolve(model)\r\n  }\r\n\r\n  /**\r\n   * Ensure that we have a real model from an id, object, or model.\r\n   *\r\n   * @private\r\n   * @instance\r\n   * @method _ensureModel\r\n   * @memberOf Storage\r\n   * @params {Number|String|Object|Backbone.Model} - An id, object, or model.\r\n   * @returns {Backbone.Model} - The model.\r\n   */\r\n  _ensureModel (model) {\r\n    const ModelClass = this.constructor.model\r\n    if (model instanceof ModelClass) {\r\n      return model\r\n    } else if (typeof model === 'object') {\r\n      return new ModelClass(model)\r\n    } else {\r\n      return new ModelClass({ id: model })\r\n    }\r\n  }\r\n}\r\n\r\nObject.assign(Storage.prototype, Backbone.Events)\r\n\r\nexport default Storage\r\n"],"names":["Storage","records","constructor","collection","listenToOnce","_hasSynced","find","model","forceFetch","record","get","Promise","resolve","_ensureModel","fetch","then","insert","findAll","options","save","add","merge","ModelClass","id","Backbone","Model","Collection","Object","assign","prototype","Events"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BMA;;;;;;;;;;;;qBAkBW;;;;;SACRC,OAAL,GAAe,IAAI,KAAKC,WAAL,CAAiBC,UAArB,EAAf;SACKC,YAAL,CAAkB,KAAKH,OAAvB,EAAgC,MAAhC,EAAwC,YAAM;YACvCI,UAAL,GAAkB,IAAlB;KADF;;;;;;;;;;;;;;;;;;;;;;;oBAiBFC,qBAAMC,OAA2B;;;QAApBC,UAAoB,uEAAP,KAAO;;QAC3BC,SAAS,KAAKR,OAAL,CAAaS,GAAb,CAAiBH,KAAjB,CAAb;;QAEIE,UAAU,CAACD,UAAf,EAA2B;aAClBG,QAAQC,OAAR,CAAgBH,MAAhB,CAAP;KADF,MAEO;cACG,KAAKI,YAAL,CAAkBN,KAAlB,CAAR;aACOI,QAAQC,OAAR,CAAgBL,MAAMO,KAAN,EAAhB,EAA+BC,IAA/B,CAAoC,YAAM;eACxC,OAAKC,MAAL,CAAYT,KAAZ,CAAP;OADK,CAAP;;;;;;;;;;;;;;;;;;;oBAmBJU,6BAA2C;;;QAAlCC,OAAkC,uEAAxB,EAAwB;QAApBV,UAAoB,uEAAP,KAAO;;QACrC,KAAKH,UAAL,IAAmB,CAACG,UAAxB,EAAoC;aAC3BG,QAAQC,OAAR,CAAgB,KAAKX,OAArB,CAAP;KADF,MAEO;aACEU,QAAQC,OAAR,CAAgB,KAAKX,OAAL,CAAaa,KAAb,CAAmBI,OAAnB,CAAhB,EAA6CH,IAA7C,CAAkD,YAAM;eACtD,OAAKd,OAAZ;OADK,CAAP;;;;;;;;;;;;;;;;oBAgBJkB,qBAAMZ,OAAO;;;QACPE,SAAS,KAAKR,OAAL,CAAaS,GAAb,CAAiBH,KAAjB,CAAb;YACQE,UAAU,KAAKI,YAAL,CAAkBN,KAAlB,CAAlB;WACOI,QAAQC,OAAR,CAAgBL,MAAMY,IAAN,EAAhB,EAA8BJ,IAA9B,CAAmC,YAAM;UAC1C,CAACN,MAAL,EAAa;eACNO,MAAL,CAAYT,KAAZ;;aAEKA,KAAP;KAJK,CAAP;;;;;;;;;;;;;;;oBAkBFS,yBAAQT,OAAO;YACL,KAAKN,OAAL,CAAamB,GAAb,CAAiBb,KAAjB,EAAwB,EAAEc,OAAO,IAAT,EAAxB,CAAR;WACOV,QAAQC,OAAR,CAAgBL,KAAhB,CAAP;;;;;;;;;;;;;;;oBAaFM,qCAAcN,OAAO;QACbe,aAAa,KAAKpB,WAAL,CAAiBK,KAApC;QACIA,iBAAiBe,UAArB,EAAiC;aACxBf,KAAP;KADF,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;aAC7B,IAAIe,UAAJ,CAAef,KAAf,CAAP;KADK,MAEA;aACE,IAAIe,UAAJ,CAAe,EAAEC,IAAIhB,KAAN,EAAf,CAAP;;;;;;;AA9HAP,QAMGO,QAAQiB,SAASC;AANpBzB,QAYGG,aAAaqB,SAASE;;;AAuH/BC,OAAOC,MAAP,CAAc5B,QAAQ6B,SAAtB,EAAiCL,SAASM,MAA1C;;;;"}